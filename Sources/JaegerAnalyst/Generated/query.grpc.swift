//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Jaeger_ApiV2_QueryServiceClient, then call methods of this protocol to make API calls.
internal protocol Jaeger_ApiV2_QueryServiceClientProtocol: GRPCClient {
  func getTrace(
    _ request: Jaeger_ApiV2_GetTraceRequest,
    callOptions: CallOptions?,
    handler: @escaping (Jaeger_ApiV2_SpansResponseChunk) -> Void
  ) -> ServerStreamingCall<Jaeger_ApiV2_GetTraceRequest, Jaeger_ApiV2_SpansResponseChunk>

  func archiveTrace(
    _ request: Jaeger_ApiV2_ArchiveTraceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Jaeger_ApiV2_ArchiveTraceRequest, Jaeger_ApiV2_ArchiveTraceResponse>

  func findTraces(
    _ request: Jaeger_ApiV2_FindTracesRequest,
    callOptions: CallOptions?,
    handler: @escaping (Jaeger_ApiV2_SpansResponseChunk) -> Void
  ) -> ServerStreamingCall<Jaeger_ApiV2_FindTracesRequest, Jaeger_ApiV2_SpansResponseChunk>

  func getServices(
    _ request: Jaeger_ApiV2_GetServicesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Jaeger_ApiV2_GetServicesRequest, Jaeger_ApiV2_GetServicesResponse>

  func getOperations(
    _ request: Jaeger_ApiV2_GetOperationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Jaeger_ApiV2_GetOperationsRequest, Jaeger_ApiV2_GetOperationsResponse>

  func getDependencies(
    _ request: Jaeger_ApiV2_GetDependenciesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Jaeger_ApiV2_GetDependenciesRequest, Jaeger_ApiV2_GetDependenciesResponse>

}

extension Jaeger_ApiV2_QueryServiceClientProtocol {

  /// Server streaming call to GetTrace
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTrace.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getTrace(
    _ request: Jaeger_ApiV2_GetTraceRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Jaeger_ApiV2_SpansResponseChunk) -> Void
  ) -> ServerStreamingCall<Jaeger_ApiV2_GetTraceRequest, Jaeger_ApiV2_SpansResponseChunk> {
    return self.makeServerStreamingCall(
      path: "/jaeger.api_v2.QueryService/GetTrace",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Unary call to ArchiveTrace
  ///
  /// - Parameters:
  ///   - request: Request to send to ArchiveTrace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func archiveTrace(
    _ request: Jaeger_ApiV2_ArchiveTraceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Jaeger_ApiV2_ArchiveTraceRequest, Jaeger_ApiV2_ArchiveTraceResponse> {
    return self.makeUnaryCall(
      path: "/jaeger.api_v2.QueryService/ArchiveTrace",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Server streaming call to FindTraces
  ///
  /// - Parameters:
  ///   - request: Request to send to FindTraces.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func findTraces(
    _ request: Jaeger_ApiV2_FindTracesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Jaeger_ApiV2_SpansResponseChunk) -> Void
  ) -> ServerStreamingCall<Jaeger_ApiV2_FindTracesRequest, Jaeger_ApiV2_SpansResponseChunk> {
    return self.makeServerStreamingCall(
      path: "/jaeger.api_v2.QueryService/FindTraces",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Unary call to GetServices
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getServices(
    _ request: Jaeger_ApiV2_GetServicesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Jaeger_ApiV2_GetServicesRequest, Jaeger_ApiV2_GetServicesResponse> {
    return self.makeUnaryCall(
      path: "/jaeger.api_v2.QueryService/GetServices",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to GetOperations
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOperations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOperations(
    _ request: Jaeger_ApiV2_GetOperationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Jaeger_ApiV2_GetOperationsRequest, Jaeger_ApiV2_GetOperationsResponse> {
    return self.makeUnaryCall(
      path: "/jaeger.api_v2.QueryService/GetOperations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to GetDependencies
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDependencies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDependencies(
    _ request: Jaeger_ApiV2_GetDependenciesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Jaeger_ApiV2_GetDependenciesRequest, Jaeger_ApiV2_GetDependenciesResponse> {
    return self.makeUnaryCall(
      path: "/jaeger.api_v2.QueryService/GetDependencies",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Jaeger_ApiV2_QueryServiceClient: Jaeger_ApiV2_QueryServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the jaeger.api_v2.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Jaeger_ApiV2_QueryServiceProvider: CallHandlerProvider {
  func getTrace(request: Jaeger_ApiV2_GetTraceRequest, context: StreamingResponseCallContext<Jaeger_ApiV2_SpansResponseChunk>) -> EventLoopFuture<GRPCStatus>
  func archiveTrace(request: Jaeger_ApiV2_ArchiveTraceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Jaeger_ApiV2_ArchiveTraceResponse>
  func findTraces(request: Jaeger_ApiV2_FindTracesRequest, context: StreamingResponseCallContext<Jaeger_ApiV2_SpansResponseChunk>) -> EventLoopFuture<GRPCStatus>
  func getServices(request: Jaeger_ApiV2_GetServicesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Jaeger_ApiV2_GetServicesResponse>
  func getOperations(request: Jaeger_ApiV2_GetOperationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Jaeger_ApiV2_GetOperationsResponse>
  func getDependencies(request: Jaeger_ApiV2_GetDependenciesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Jaeger_ApiV2_GetDependenciesResponse>
}

extension Jaeger_ApiV2_QueryServiceProvider {
  internal var serviceName: String { return "jaeger.api_v2.QueryService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetTrace":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTrace(request: request, context: context)
        }
      }

    case "ArchiveTrace":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.archiveTrace(request: request, context: context)
        }
      }

    case "FindTraces":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.findTraces(request: request, context: context)
        }
      }

    case "GetServices":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getServices(request: request, context: context)
        }
      }

    case "GetOperations":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getOperations(request: request, context: context)
        }
      }

    case "GetDependencies":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getDependencies(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload`
extension Jaeger_ApiV2_GetTraceRequest: GRPCProtobufPayload {}
extension Jaeger_ApiV2_SpansResponseChunk: GRPCProtobufPayload {}
extension Jaeger_ApiV2_ArchiveTraceRequest: GRPCProtobufPayload {}
extension Jaeger_ApiV2_ArchiveTraceResponse: GRPCProtobufPayload {}
extension Jaeger_ApiV2_TraceQueryParameters: GRPCProtobufPayload {}
extension Jaeger_ApiV2_FindTracesRequest: GRPCProtobufPayload {}
extension Jaeger_ApiV2_GetServicesRequest: GRPCProtobufPayload {}
extension Jaeger_ApiV2_GetServicesResponse: GRPCProtobufPayload {}
extension Jaeger_ApiV2_GetOperationsRequest: GRPCProtobufPayload {}
extension Jaeger_ApiV2_Operation: GRPCProtobufPayload {}
extension Jaeger_ApiV2_GetOperationsResponse: GRPCProtobufPayload {}
extension Jaeger_ApiV2_GetDependenciesRequest: GRPCProtobufPayload {}
extension Jaeger_ApiV2_GetDependenciesResponse: GRPCProtobufPayload {}
